{"version":3,"sources":["CreditCard.tsx"],"names":[],"mappings":"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","file":"CreditCard.js","sourcesContent":["import React, { useState, MouseEvent, ChangeEvent } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Cards from \"react-credit-cards-2\";\r\nimport 'react-credit-cards-2/dist/es/styles-compiled.css';\r\nimport \"./CreditCard.css\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Box,\r\n  Paper,\r\n  MenuItem,\r\n  Popover,\r\n} from \"@mui/material\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { blockedCountries, countries } from \"../Data\";\r\n\r\n\r\n  interface CardDetails {\r\n    number: string;\r\n    name: string;\r\n    expiry: string;\r\n    cvc: string;\r\n    country: string;\r\n  }\r\n  \r\n\r\n\r\ninterface CreditCardProps {\r\n  onCardSubmit: (cardDetails: CardDetails) => void;\r\n}\r\n\r\nconst CreditCard: React.FC<CreditCardProps> = ({ onCardSubmit }) => {\r\n  const navigate = useNavigate();\r\n\r\n  const [cardDetails, setCardDetails] = useState<CardDetails>({\r\n    number: \"\",\r\n    name: \"\",\r\n    expiry: \"\",\r\n    cvc: \"\",\r\n    country: \"\",\r\n  });\r\n\r\n\r\n  const [focus, setFocus] = useState<\"number\" | \"name\" | \"expiry\" | \"cvc\" | \"country\" | undefined>(undefined);\r\n  const [isBlockedCountry, setIsBlockedCountry] = useState<boolean>(false);\r\n  const [countryMenuAnchorEl, setCountryMenuAnchorEl] = useState<null | HTMLElement>(null);\r\n\r\n  const handleCountryClick = (event: MouseEvent<HTMLElement>) => {\r\n    setCountryMenuAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleInputFocus = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    setFocus(evt.target.name as \"number\" | \"name\" | \"expiry\" | \"cvc\" | \"country\");\r\n  }\r\n\r\n  const handleCountryClose = () => {\r\n    setCountryMenuAnchorEl(null);\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    number: Yup.string()\r\n      .required(\"Card Number is required\")\r\n      .matches(/^\\d{16}$/, \"Card Number must be 16 digits\"),\r\n    name: Yup.string().required(\"Card Name is required\"),\r\n    expiry: Yup.string()\r\n      .required(\"Expiration Date is required\")\r\n      .matches(/^(0[1-9]|1[0-2])\\/\\d{2}$/, \"Invalid Expiration Date\"),\r\n    cvc: Yup.string()\r\n      .required(\"CVV is required\")\r\n      .matches(/^\\d{3}$/, \"CVV must be 3 digits\"),\r\n    country: Yup.string().required(\"Country is required\"),\r\n  });\r\n\r\n  const handleButtonClick = () => {\r\n    if (!cardDetails.number || !cardDetails.name || !cardDetails.expiry || !cardDetails.cvc || !cardDetails.country) {\r\n      alert(\"Please fill in all card details.\");\r\n    } else if (blockedCountries.includes(cardDetails.country)) {\r\n      alert(\"Card submission is blocked for the selected country.\");\r\n    } else {\r\n      const storedCards = JSON.parse(localStorage.getItem(\"creditCards\") || \"[]\") as CardDetails[];\r\n      const cardExists = storedCards.some((storedCard) => storedCard.number === cardDetails.number);\r\n\r\n      if (!cardExists) {\r\n        localStorage.setItem(\r\n          \"creditCards\",\r\n          JSON.stringify([...storedCards, cardDetails])\r\n        );\r\n\r\n        onCardSubmit(cardDetails);\r\n        setIsBlockedCountry(false);\r\n        navigate(\"/table\");\r\n      } else {\r\n        alert(\"This card has already been captured.\"); \r\n      }\r\n    }\r\n  };\r\n\r\n  const handleNumberChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const cleanedNumber = e.target.value.replace(/\\D/g, \"\");\r\n    if (cleanedNumber.length > 16) {\r\n      alert(\"Card Number must be 16 digits\");\r\n    } else {\r\n      const formattedNumber = cleanedNumber.replace(/(\\d{4})/g, \"$1 \").trim();\r\n      setCardDetails((prevCardDetails) => ({ ...prevCardDetails, number: formattedNumber }));\r\n    }\r\n  };\r\n\r\n  const handleDateChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const cleanedDate = e.target.value.replace(/\\D/g, \"\");\r\n    const formattedDate = cleanedDate.replace(/(\\d{2})(\\d{2})/, \"$1/$2\");\r\n\r\n    setCardDetails((prevCardDetails) => ({ ...prevCardDetails, expiry: formattedDate }));\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      <Grid\r\n        container\r\n        spacing={1}\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        style={{ minHeight: \"100vh\" }}\r\n      >\r\n        <Box\r\n          component={Paper}\r\n          elevation={2}\r\n          sx={{\r\n            padding: 3,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            backgroundImage:\r\n              \"linear-gradient(to bottom right, #385170,#142d4c,  #38598b)\",\r\n            borderRadius: \"10px\",\r\n            backgroundColor: \"transparent\",\r\n          }}\r\n        >\r\n          <Grid item xs={12}>\r\n            <div className=\"rccs__card rccs__card--unknown\">\r\n              <Cards\r\n                number={cardDetails.number}\r\n                name={cardDetails.name}\r\n                expiry={cardDetails.expiry}\r\n                cvc={cardDetails.cvc}\r\n              />\r\n            </div>\r\n          </Grid>\r\n\r\n          <Formik\r\n            initialValues={cardDetails}\r\n            validationSchema={validationSchema}\r\n            onSubmit={() => {}}\r\n          >\r\n            {({ isSubmitting }) => (\r\n              <Form>\r\n                <Grid container spacing={1}>\r\n                  <Grid item xs={12}>\r\n                    <Field\r\n                      as={TextField}\r\n                      fullWidth\r\n                      label=\"Card Number\"\r\n                      variant=\"outlined\"\r\n                      name=\"number\"\r\n                      value={cardDetails.number}\r\n                      onChange={handleNumberChange}\r\n                      onFocus={handleInputFocus}\r\n                      InputLabelProps={{ style: { color: \"primary\" } }}\r\n                      style={{ borderRadius: \"35px\" }}\r\n                    />\r\n                    <ErrorMessage\r\n                      name=\"number\"\r\n                      component=\"div\"\r\n                      className=\"error\"\r\n                      style={{ fontSize: \"small\", color: \"red\" }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <Field\r\n                      as={TextField}\r\n                      fullWidth\r\n                      label=\"Card Name\"\r\n                      variant=\"outlined\"\r\n                      name=\"name\"\r\n                      value={cardDetails.name}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                        setCardDetails({ ...cardDetails, name: e.target.value });\r\n                      }}\r\n                      onFocus={handleInputFocus}\r\n                    />\r\n                    <ErrorMessage\r\n                      name=\"name\"\r\n                      component=\"div\"\r\n                      className=\"error\"\r\n                      style={{ fontSize: \"small\", color: \"red\" }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <Field\r\n                      as={TextField}\r\n                      fullWidth\r\n                      label=\"Expiration Date\"\r\n                      variant=\"outlined\"\r\n                      name=\"expiry\"\r\n                      value={cardDetails.expiry}\r\n                      onChange={handleDateChange}\r\n                      onFocus={handleInputFocus}\r\n                    />\r\n                    <ErrorMessage\r\n                      name=\"expiry\"\r\n                      component=\"div\"\r\n                      className=\"error\"\r\n                      style={{ fontSize: \"small\", color: \"red\" }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <Field\r\n                      as={TextField}\r\n                      fullWidth\r\n                      label=\"CVC\"\r\n                      variant=\"outlined\"\r\n                      name=\"cvc\"\r\n                      value={cardDetails.cvc}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                        setCardDetails({ ...cardDetails, cvc: e.target.value });\r\n                      }}\r\n                      onFocus={handleInputFocus}\r\n                    />\r\n                    <ErrorMessage\r\n                      name=\"cvc\"\r\n                      component=\"div\"\r\n                      className=\"error\"\r\n                      style={{ fontSize: \"small\", color: \"red\" }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <Field\r\n                      as={TextField}\r\n                      fullWidth\r\n                      label=\"Country\"\r\n                      variant=\"outlined\"\r\n                      name=\"country\"\r\n                      value={cardDetails.country}\r\n                      onClick={handleCountryClick}\r\n                      onFocus={handleInputFocus}\r\n                      style={{ borderRadius: \"35px\" }}\r\n                    />\r\n                    <ErrorMessage\r\n                      name=\"country\"\r\n                      component=\"div\"\r\n                      className=\"error\"\r\n                      style={{ fontSize: \"small\", color: \"red\" }}\r\n                    />\r\n                    {isBlockedCountry && (\r\n                      <div\r\n                        className=\"error\"\r\n                        style={{ fontSize: \"small\", color: \"red\" }}\r\n                      >\r\n                        Credit card submission is blocked for the selected\r\n                        country.\r\n                      </div>\r\n                    )}\r\n                    <Popover\r\n                      open={Boolean(countryMenuAnchorEl)}\r\n                      anchorEl={countryMenuAnchorEl}\r\n                      onClose={handleCountryClose}\r\n                      anchorOrigin={{\r\n                        vertical: \"bottom\",\r\n                        horizontal: \"left\",\r\n                      }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          maxHeight: \"200px\",\r\n                          overflowY: \"scroll\",\r\n                          backgroundColor: \"#001f3f\",\r\n                        }}\r\n                      >\r\n                        {countries.map((option, index) => (\r\n                          <MenuItem\r\n                            key={index}\r\n                            value={option}\r\n                            onClick={() => {\r\n                              setCardDetails({ ...cardDetails, country: option });\r\n                              handleCountryClose();\r\n                            }}\r\n                          >\r\n                            {option}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </div>\r\n                    </Popover>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    sx={{ mt: 3, mb: 2 , borderRadius: \"25px\" }}\r\n                    disabled={isSubmitting || isBlockedCountry}\r\n                    onClick={handleButtonClick}\r\n                  >\r\n                    Submit Card\r\n                  </Button>\r\n                </Grid>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </Box>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CreditCard;\r\n"]}